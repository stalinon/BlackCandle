using BlackCandle.Application.Interfaces.Infrastructure;
using BlackCandle.Domain.Configuration;
using BlackCandle.Domain.Entities;
using BlackCandle.Telegram;

using Moq;

using Telegram.Bot;
using Telegram.Bot.Requests;
using Telegram.Bot.Types;
using Telegram.Bot.Types.Enums;

namespace BlackCandle.Tests.Telegram;

/// <summary>
///     –¢–µ—Å—Ç—ã –Ω–∞ <see cref="TelegramService" />
/// </summary>
/// <remarks>
///     <list type="number">
///         <item>–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ</item>
///         <item>–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ñ–∞–π–ª</item>
///         <item>–õ–æ–≥–∏—Ä—É–µ—Ç –æ—à–∏–±–∫—É –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ç–µ–∫—Å—Ç–∞</item>
///         <item>–õ–æ–≥–∏—Ä—É–µ—Ç –æ—à–∏–±–∫—É –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞</item>
///     </list>
/// </remarks>
public sealed class TelegramServiceTests
{
    private const string ChatId = "1337";

    private readonly Mock<IBotSettingsService> _botSettingsMock = new();
    private readonly Mock<ILoggerService> _loggerMock = new();
    private readonly Mock<ITelegramBotClient> _botMock = new();

    private readonly TelegramService _service;

    /// <inheritdoc cref="TelegramServiceTests"/>
    public TelegramServiceTests()
    {
        _botSettingsMock.Setup(x => x.GetAsync()).ReturnsAsync(new BotSettings
        {
            TelegramOptions = new TelegramOptions
            {
                BotToken = "dummy-token",
                ChatId = ChatId,
            },
        });

        _botMock.Setup(x => x.SendRequest(It.IsAny<SendMessageRequest>(), default))
            .ReturnsAsync(new Message());

        _botMock.Setup(x => x.SendRequest(It.IsAny<SendDocumentRequest>(), default))
            .ReturnsAsync(new Message());

        _service = new TelegramServiceProxy(_botSettingsMock.Object, _loggerMock.Object, _botMock.Object);
    }

    /// <summary>
    ///     –¢–µ—Å—Ç 1: –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ–∫—Å—Ç–∞ –≤—ã–∑—ã–≤–∞–µ—Ç Telegram API
    /// </summary>
    [Fact(DisplayName = "–¢–µ—Å—Ç 1: –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ–∫—Å—Ç–∞ –≤—ã–∑—ã–≤–∞–µ—Ç Telegram API")]
    public async Task SendMessageAsync_ShouldCallTelegramApi()
    {
        // Act
        await _service.SendMessageAsync("hello", disableNotification: true);

        // Assert
        _botMock.Verify(
            x => x.SendRequest(
            It.Is<SendMessageRequest>(r =>
                r.Text == "hello" &&
                r.ChatId == ChatId &&
                r.ParseMode == ParseMode.Markdown &&
                r.DisableNotification == true), default),
            Times.Once);
    }

    /// <summary>
    ///     –¢–µ—Å—Ç 2: –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–∞ –≤—ã–∑—ã–≤–∞–µ—Ç Telegram API
    /// </summary>
    [Fact(DisplayName = "–¢–µ—Å—Ç 2: –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–∞ –≤—ã–∑—ã–≤–∞–µ—Ç Telegram API")]
    public async Task SendFileAsync_ShouldCallTelegramApi()
    {
        using var stream = new MemoryStream("file content"u8.ToArray());

        // Act
        await _service.SendFileAsync(stream, "file.pdf", "caption here");

        // Assert
        _botMock.Verify(
            x => x.SendRequest(
            It.Is<SendDocumentRequest>(r =>
                r.Caption == "caption here" &&
                r.ChatId == ChatId &&
                r.ParseMode == ParseMode.Markdown &&
                r.Document is InputFileStream), default),
            Times.Once);
    }

    /// <summary>
    ///     –¢–µ—Å—Ç 3: –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ª–æ–≥–∏—Ä—É–µ—Ç—Å—è
    /// </summary>
    [Fact(DisplayName = "–¢–µ—Å—Ç 3: –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ª–æ–≥–∏—Ä—É–µ—Ç—Å—è")]
    public async Task SendMessageAsync_ShouldLogError_OnException()
    {
        _botMock.Setup(x => x.SendRequest(It.IsAny<SendMessageRequest>(), default))
            .ThrowsAsync(new Exception("fail"));

        await _service.SendMessageAsync("err");

        _loggerMock.Verify(
            x => x.LogError("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ Telegram-—Å–æ–æ–±—â–µ–Ω–∏—è", It.Is<Exception>(e => e.Message == "fail")),
            Times.Once);
    }

    /// <summary>
    ///     –¢–µ—Å—Ç 4: –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞ –ª–æ–≥–∏—Ä—É–µ—Ç—Å—è
    /// </summary>
    [Fact(DisplayName = "–¢–µ—Å—Ç 4: –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞ –ª–æ–≥–∏—Ä—É–µ—Ç—Å—è")]
    public async Task SendFileAsync_ShouldLogError_OnException()
    {
        using var stream = new MemoryStream("–∫–∞–ø—É—Ç"u8.ToArray());

        _botMock.Setup(x => x.SendRequest(It.IsAny<SendDocumentRequest>(), default))
            .ThrowsAsync(new Exception("file fail"));

        await _service.SendFileAsync(stream, "fail.pdf", "üíÄ");

        _loggerMock.Verify(
            x => x.LogError("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞ –≤ Telegram", It.Is<Exception>(e => e.Message == "file fail")),
            Times.Once);
    }

    /// <summary>
    ///     –¢–µ—Å—Ç 5: –ü—Ä–∏ –¥–ª–∏–Ω–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è SendFileAsync
    /// </summary>
    [Fact(DisplayName = "–¢–µ—Å—Ç 5: –ü—Ä–∏ –¥–ª–∏–Ω–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è SendFileAsync")]
    public async Task SendMessageAsync_ShouldSendFile_WhenMessageTooLong()
    {
        // arrange
        var longMessage = new string('A', 5000); // –±–æ–ª—å—à–µ –ª–∏–º–∏—Ç–∞

        var fileWasSent = false;

        // –ø–æ–¥–º–µ–Ω—è–µ–º TelegramService —Å –ø–µ—Ä–µ—Ö–≤–∞—Ç–æ–º SendFileAsync
        var service = new TelegramServiceProxy(_botSettingsMock.Object, _loggerMock.Object, _botMock.Object,
            onSendFile: () => fileWasSent = true);

        // act
        await service.SendMessageAsync(longMessage);

        // assert
        Assert.True(fileWasSent);
    }

    /// <summary>
    ///     –¢–µ—Å—Ç 6: –û—à–∏–±–∫–∞ –≤ SendFileAsync –ª–æ–≥–∏—Ä—É–µ—Ç—Å—è
    /// </summary>
    [Fact(DisplayName = "–¢–µ—Å—Ç 6: –û—à–∏–±–∫–∞ –≤ SendFileAsync –ª–æ–≥–∏—Ä—É–µ—Ç—Å—è")]
    public async Task SendMessageAsync_ShouldLogError_WhenSendFileFails()
    {
        var longMessage = new string('B', 5000); // —Å–Ω–æ–≤–∞ –¥–ª–∏–Ω–Ω–æ–µ

        var service = new TelegramServiceProxy(_botSettingsMock.Object, _loggerMock.Object, _botMock.Object,
            onSendFile: () => throw new Exception("stream exploded"));

        await service.SendMessageAsync(longMessage);

        _loggerMock.Verify(
            x => x.LogError(
                "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ Telegram-—Å–æ–æ–±—â–µ–Ω–∏—è",
                It.Is<Exception>(e => e.Message == "stream exploded")),
            Times.Once);
    }

    /// <summary>
    ///     –ü—Ä–æ–∫—Å–∏-—Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –¥–ª—è –≤–Ω–µ–¥—Ä–µ–Ω–∏—è –º–æ–∫–Ω—É—Ç–æ–≥–æ TelegramBotClient
    /// </summary>
    private sealed class TelegramServiceProxy : TelegramService
    {
        private readonly ITelegramBotClient _mockBot;
        private readonly Action? _onSendFile;
        private readonly string _chatId;

        /// <inheritdoc cref="TelegramServiceProxy" />
        public TelegramServiceProxy(
            IBotSettingsService settingsService,
            ILoggerService logger,
            ITelegramBotClient bot,
            Action? onSendFile = null)
            : base(settingsService, logger)
        {
            _mockBot = bot;
            _onSendFile = onSendFile;
            _chatId = ChatId;
        }

        /// <inheritdoc />
        public override async Task SendFileAsync(Stream fileStream, string fileName, string caption = "")
        {
            if (_onSendFile != null)
            {
                _onSendFile?.Invoke();
            }
            else
            {
                await base.SendFileAsync(fileStream, fileName, caption);
            }

            await Task.CompletedTask;
        }

        /// <inheritdoc />
        protected override Task<(ITelegramBotClient Bot, string ChatId)> GetBotSettings()
            => Task.FromResult((_mockBot, _chatId));
    }
}
