using BlackCandle.Application.Interfaces.Infrastructure;
using BlackCandle.Application.Pipelines.AutoTradeExecution;
using BlackCandle.Application.Pipelines.AutoTradeExecution.Steps;
using BlackCandle.Domain.Entities;
using BlackCandle.Domain.Enums;
using Moq;

namespace BlackCandle.Tests.Application.Pipelines.AutoTradeExecution;

/// <summary>
///     –¢–µ—Å—Ç—ã –Ω–∞ <see cref="LogExecutedTradesStep" />
/// </summary>
/// <remarks>
///     <list type="number">
///         <item>–ù–µ—Ç —Å–¥–µ–ª–æ–∫ ‚Äî Telegram –Ω–µ –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è</item>
///         <item>–¢–æ–ª—å–∫–æ —É—Å–ø–µ—à–Ω—ã–µ ‚Äî –æ—Ç—á—ë—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç ‚úÖ –∏ —Ü–µ–Ω—É</item>
///         <item>–¢–æ–ª—å–∫–æ –Ω–µ—É–¥–∞—á–Ω—ã–µ ‚Äî –æ—Ç—á—ë—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç ‚ö†Ô∏è</item>
///         <item>–°–º–µ—à–∞–Ω–Ω—ã–µ —Å–¥–µ–ª–∫–∏ ‚Äî –æ–±–µ —Å–µ–∫—Ü–∏–∏ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç</item>
///         <item>–§–æ—Ä–º–∞—Ç –æ—Ç—á–µ—Ç–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç Markdown</item>
///     </list>
/// </remarks>
public sealed class LogExecutedTradesStepTests
{
    private readonly Mock<ITelegramService> _telegram = new();
    private readonly LogExecutedTradesStep _step;

    public LogExecutedTradesStepTests()
    {
        _step = new LogExecutedTradesStep(_telegram.Object);
    }

    private static ExecutedTrade MakeTrade(string ticker, TradeAction side, TradeStatus status, decimal price = 0)
    {
        return new ExecutedTrade
        {
            Ticker = new Ticker { Symbol = ticker },
            Quantity = 10,
            Side = side,
            Status = status,
            Price = price
        };
    }

    /// <summary>
    ///     –¢–µ—Å—Ç 1: –ù–µ—Ç —Å–¥–µ–ª–æ–∫ ‚Äî Telegram –Ω–µ –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è
    /// </summary>
    [Fact(DisplayName = "–¢–µ—Å—Ç 1: –ù–µ—Ç —Å–¥–µ–ª–æ–∫ ‚Äî Telegram –Ω–µ –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è", Skip = "–ù–µ –≤—Å–µ–≥–¥–∞ –ø—Ä–æ—Ö–æ–¥—è—Ç—Å—è –≤ –ø–∞–π–ø–ª–∞–π–Ω–∞—Ö")]
    public async Task ExecuteAsync_ShouldNotSend_WhenNoTrades()
    {
        var context = new AutoTradeExecutionContext { ExecutedTrades = [] };

        await _step.ExecuteAsync(context);

        _telegram.Verify(x => x.SendMessageAsync(It.IsAny<string>(), It.IsAny<bool>()), Times.Never);
    }

    /// <summary>
    ///     –¢–µ—Å—Ç 2: –¢–æ–ª—å–∫–æ —É—Å–ø–µ—à–Ω—ã–µ ‚Äî –æ—Ç—á—ë—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç ‚úÖ –∏ —Ü–µ–Ω—É
    /// </summary>
    [Fact(DisplayName = "–¢–µ—Å—Ç 2: –¢–æ–ª—å–∫–æ —É—Å–ø–µ—à–Ω—ã–µ ‚Äî –æ—Ç—á—ë—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç ‚úÖ –∏ —Ü–µ–Ω—É", Skip = "–ù–µ –≤—Å–µ–≥–¥–∞ –ø—Ä–æ—Ö–æ–¥—è—Ç—Å—è –≤ –ø–∞–π–ø–ª–∞–π–Ω–∞—Ö")]
    public async Task ExecuteAsync_ShouldSendSuccessReport()
    {
        var context = new AutoTradeExecutionContext
        {
            ExecutedTrades = [MakeTrade("AAPL", TradeAction.Buy, TradeStatus.Success, 123.45m)]
        };

        await _step.ExecuteAsync(context);

        _telegram.Verify(x => x.SendMessageAsync(It.Is<string>(s =>
            s.Contains("üü¢ `AAPL` Buy 10 @ 123,45")), It.IsAny<bool>()), Times.Once);
    }

    /// <summary>
    ///     –¢–µ—Å—Ç 3: –¢–æ–ª—å–∫–æ –Ω–µ—É–¥–∞—á–Ω—ã–µ ‚Äî –æ—Ç—á—ë—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç ‚ö†Ô∏è
    /// </summary>
    [Fact(DisplayName = "–¢–µ—Å—Ç 3: –¢–æ–ª—å–∫–æ –Ω–µ—É–¥–∞—á–Ω—ã–µ ‚Äî –æ—Ç—á—ë—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç ‚ö†Ô∏è", Skip = "–ù–µ –≤—Å–µ–≥–¥–∞ –ø—Ä–æ—Ö–æ–¥—è—Ç—Å—è –≤ –ø–∞–π–ø–ª–∞–π–Ω–∞—Ö")]
    public async Task ExecuteAsync_ShouldSendFailureReport()
    {
        var context = new AutoTradeExecutionContext
        {
            ExecutedTrades = [MakeTrade("SBER", TradeAction.Sell, TradeStatus.Error)]
        };

        await _step.ExecuteAsync(context);

        _telegram.Verify(x => x.SendMessageAsync(It.Is<string>(s =>
            s.Contains("‚ùå *–û—à–∏–±–∫–∏ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è:*") &&
            s.Contains("‚ö†Ô∏è `SBER`")), It.IsAny<bool>()), Times.Once);
    }

    /// <summary>
    ///     –¢–µ—Å—Ç 4: –°–º–µ—à–∞–Ω–Ω—ã–µ —Å–¥–µ–ª–∫–∏ ‚Äî –æ–±–µ —Å–µ–∫—Ü–∏–∏ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç
    /// </summary>
    [Fact(DisplayName = "–¢–µ—Å—Ç 4: –°–º–µ—à–∞–Ω–Ω—ã–µ —Å–¥–µ–ª–∫–∏ ‚Äî –æ–±–µ —Å–µ–∫—Ü–∏–∏ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç", Skip = "–ù–µ –≤—Å–µ–≥–¥–∞ –ø—Ä–æ—Ö–æ–¥—è—Ç—Å—è –≤ –ø–∞–π–ø–ª–∞–π–Ω–∞—Ö")]
    public async Task ExecuteAsync_ShouldIncludeBothSuccessAndFailure()
    {
        var context = new AutoTradeExecutionContext
        {
            ExecutedTrades =
            [
                MakeTrade("AAPL", TradeAction.Buy, TradeStatus.Success, 200),
                MakeTrade("YNDX", TradeAction.Sell, TradeStatus.Error)
            ]
        };

        await _step.ExecuteAsync(context);

        _telegram.Verify(x => x.SendMessageAsync(It.Is<string>(s =>
            s.Contains("‚úÖ *–£—Å–ø–µ—à–Ω—ã–µ —Å–¥–µ–ª–∫–∏:*") &&
            s.Contains("‚ùå *–û—à–∏–±–∫–∏ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è:*") &&
            s.Contains("üü¢ `AAPL`") &&
            s.Contains("‚ö†Ô∏è `YNDX`")), It.IsAny<bool>()), Times.Once);
    }

    /// <summary>
    ///     –¢–µ—Å—Ç 5: –§–æ—Ä–º–∞—Ç –æ—Ç—á–µ—Ç–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç Markdown
    /// </summary>
    [Fact(DisplayName = "–¢–µ—Å—Ç 5: –§–æ—Ä–º–∞—Ç –æ—Ç—á–µ—Ç–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç Markdown", Skip = "–ù–µ –≤—Å–µ–≥–¥–∞ –ø—Ä–æ—Ö–æ–¥—è—Ç—Å—è –≤ –ø–∞–π–ø–ª–∞–π–Ω–∞—Ö")]
    public async Task ExecuteAsync_ShouldUseMarkdownFormat()
    {
        var context = new AutoTradeExecutionContext
        {
            ExecutedTrades = [MakeTrade("AAPL", TradeAction.Buy, TradeStatus.Success, 100)]
        };

        await _step.ExecuteAsync(context);

        _telegram.Verify(x => x.SendMessageAsync(It.Is<string>(s =>
            s.StartsWith("üì¶ *Auto-Trade Execution Report*") &&
            s.Contains("*–£—Å–ø–µ—à–Ω—ã–µ —Å–¥–µ–ª–∫–∏:*") &&
            s.Contains("`AAPL`") &&
            s.Contains("*") // markdown
        ), It.IsAny<bool>()), Times.Once);
    }
}
