using System.Text;
using BlackCandle.Application.Interfaces.Pipelines;
using BlackCandle.Domain.Entities;
using BlackCandle.Domain.Enums;

namespace BlackCandle.Application.Pipelines.PortfolioAnalysis.Steps;

/// <summary>
///     –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
/// </summary>
internal sealed class LogStep : IPipelineStep<PortfolioAnalysisContext>
{
    /// <inheritdoc />
    public PipelineStepStatus Status { get; set; }

    /// <inheritdoc />
    public string StepName => "–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ";

    /// <inheritdoc />
    public Task ExecuteAsync(PortfolioAnalysisContext context, CancellationToken cancellationToken = default)
    {
        throw new NotImplementedException();
    }
    
    private static string BuildTelegramReport(List<TradeSignal> signals, DateTime date)
    {
        if (signals.Count == 0)
        {
            return $"üìâ *Portfolio Analysis Report*\n–î–∞—Ç–∞: {date:dd.MM.yyyy HH:mm}\n\n–ù–µ—Ç —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤.";
        }

        var sb = new StringBuilder();
        sb.AppendLine("üìä *Portfolio Analysis Report*");
        sb.AppendLine($"üóì –î–∞—Ç–∞: {date:dd.MM.yyyy HH:mm}");
        sb.AppendLine();
        sb.AppendLine("*–°–∏–≥–Ω–∞–ª—ã:*");

        foreach (var s in signals.OrderByDescending(s => s.Confidence))
        {
            var emoji = s.Action switch
            {
                TradeAction.Buy => "üü¢",
                TradeAction.Sell => "üî¥",
                _ => "‚ö™"
            };

            var conf = s.Confidence switch
            {
                ConfidenceLevel.High => "üî•",
                ConfidenceLevel.Medium => "‚úÖ",
                _ => "‚ö†Ô∏è"
            };

            sb.AppendLine($"{emoji} `{s.Ticker}` ‚Üí *{s.Action}* {conf}");
            sb.AppendLine($"_–§—É–Ω–¥–∞–º–µ–Ω—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑: {s.Score}");
            sb.AppendLine($"_–ü—Ä–∏—á–∏–Ω–∞: {s.Reason}_");
            sb.AppendLine();
        }

        return sb.ToString().TrimEnd();
    }
}